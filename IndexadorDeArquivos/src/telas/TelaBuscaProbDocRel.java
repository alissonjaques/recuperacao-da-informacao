/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas;

import controle.BuscaProbabilistaComDocsRelevantes;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.logging.Level;
import java.util.logging.Logger;
import utils.BibliotecaDeMetodos;

/**
 *
 * @author licin
 */
public class TelaBuscaProbDocRel extends javax.swing.JInternalFrame {
    
    private ArrayList<String> documentosRelevantes;
    /**
     * Creates new form TelaBuscaProbDocRel
     */
    public TelaBuscaProbDocRel() {
        initComponents();
        preencherJComboBox();
        documentosRelevantes = new ArrayList();        
    }
    
    public void preencherJComboBox() {
        ArrayList<String> nomeDocumentos = BibliotecaDeMetodos.retornaNomeDosDocumentos();
        getJcbDocumento().addItem("");
        for (int linha = 0; linha < nomeDocumentos.size(); linha++) {
            //adicionando a categoria no combo
            getJcbDocumento().addItem(nomeDocumentos.get(linha));
        }
    }
    public void limparTabela() {
        DefaultTableModel dm = (DefaultTableModel) getjTDocumentosRetornados().getModel();
        dm.getDataVector().removeAllElements();
        dm.fireTableDataChanged();
    }
    
    public void limparTabelaDeRelevantes(){
        DefaultTableModel dm = (DefaultTableModel) getJtDocRelSelecionado().getModel();
        dm.getDataVector().removeAllElements();
        dm.fireTableDataChanged();
    }
    
    /**
     * O método preencherRelatorio() preenche a tabela de interface do usuário.
     */
    public void preencherRelatorio(ArrayList<String> nomeDocumentos, double[] similaridades) {
        DefaultTableModel model = (DefaultTableModel) getjTDocumentosRetornados().getModel();
        int i = 0;
        for (String documento : nomeDocumentos) {
            model.addRow(new Object[]{documento, similaridades[i]});
            i++;
        }
    }
    
    public void preencherTabelaRelevantes(String documentoRelevante){
        DefaultTableModel model = (DefaultTableModel) getJtDocRelSelecionado().getModel();
        model.addRow(new Object[]{documentoRelevante});
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        JPDoc = new javax.swing.JPanel();
        jttextoconsulta = new javax.swing.JTextField();
        jlconsultadoc = new javax.swing.JLabel();
        jbconsultar = new javax.swing.JButton();
        jbLimpar = new javax.swing.JButton();
        jldigitepc = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTDocumentosRetornados = new javax.swing.JTable();
        jbsair = new javax.swing.JButton();
        jlAdicionar = new javax.swing.JLabel();
        jbAdicionar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtDocRelSelecionado = new javax.swing.JTable();
        jcbDocumento = new javax.swing.JComboBox<>();

        jButton1.setText("jButton1");

        setIconifiable(true);
        setTitle("Busca Modelo Probabilista com Documentos Relevantes");

        jttextoconsulta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jttextoconsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jttextoconsultaActionPerformed(evt);
            }
        });

        jlconsultadoc.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jlconsultadoc.setText("Consulta de Documentos:");

        jbconsultar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jbconsultar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/zoom.png"))); // NOI18N
        jbconsultar.setText("Consultar");
        jbconsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbconsultarActionPerformed(evt);
            }
        });

        jbLimpar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jbLimpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/limpar-limpo.png"))); // NOI18N
        jbLimpar.setText("Limpar");
        jbLimpar.setEnabled(false);
        jbLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLimparActionPerformed(evt);
            }
        });

        jldigitepc.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jldigitepc.setText("Digite para consultar:");

        jTDocumentosRetornados.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTDocumentosRetornados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome do Documento", "Similaridade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTDocumentosRetornados);

        jbsair.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jbsair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/sair.png"))); // NOI18N
        jbsair.setText("Sair");
        jbsair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbsairActionPerformed(evt);
            }
        });

        jlAdicionar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jlAdicionar.setText("Adicionar Documentos Relevantes:");

        jbAdicionar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jbAdicionar.setText("Adicionar");
        jbAdicionar.setDefaultCapable(false);
        jbAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAdicionarActionPerformed(evt);
            }
        });

        jtDocRelSelecionado.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jtDocRelSelecionado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Documento Relevante Selecionado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jtDocRelSelecionado);

        jcbDocumento.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        javax.swing.GroupLayout JPDocLayout = new javax.swing.GroupLayout(JPDoc);
        JPDoc.setLayout(JPDocLayout);
        JPDocLayout.setHorizontalGroup(
            JPDocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPDocLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPDocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPDocLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(JPDocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbsair, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPDocLayout.createSequentialGroup()
                                .addComponent(jlconsultadoc)
                                .addGap(203, 203, 203))))
                    .addGroup(JPDocLayout.createSequentialGroup()
                        .addGroup(JPDocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(JPDocLayout.createSequentialGroup()
                                .addComponent(jlAdicionar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcbDocumento, 0, 106, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jbAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(JPDocLayout.createSequentialGroup()
                                .addComponent(jldigitepc)
                                .addGap(26, 26, 26)
                                .addComponent(jttextoconsulta)
                                .addGap(18, 18, 18)
                                .addComponent(jbconsultar)))
                        .addGap(18, 18, 18)
                        .addComponent(jbLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        JPDocLayout.setVerticalGroup(
            JPDocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPDocLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlconsultadoc)
                .addGap(35, 35, 35)
                .addGroup(JPDocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jttextoconsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jldigitepc, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbconsultar)
                    .addComponent(jbLimpar))
                .addGap(25, 25, 25)
                .addGroup(JPDocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlAdicionar)
                    .addComponent(jbAdicionar)
                    .addComponent(jcbDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbsair)
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(JPDoc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JPDoc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jttextoconsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jttextoconsultaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jttextoconsultaActionPerformed

    private void jbconsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbconsultarActionPerformed
        if (getJttextoconsulta().getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Campo vazio, favor preencher uma consulta válida.", "Mensagem de Erro", JOptionPane.ERROR_MESSAGE);
            limparTabela();
        } else if(documentosRelevantes.isEmpty()){
            JOptionPane.showMessageDialog(this, "Informe ao menos um documento relevante", "Mensagem de Erro", JOptionPane.ERROR_MESSAGE);
        }
        else{
            limparTabela();
            try {
                ArrayList<String> nomeDocumentos = new ArrayList();
                double[] similaridades = new double[143];
                // aqui
                BuscaProbabilistaComDocsRelevantes busca = new BuscaProbabilistaComDocsRelevantes();
                busca.vetorDeSimilaridadeComDocumentosRelevantes(getJttextoconsulta().getText().toLowerCase(),documentosRelevantes);
                nomeDocumentos = busca.getNomeDosDocumentos();
                similaridades = busca.getVetorDeSimilaridade();
                preencherRelatorio(nomeDocumentos, similaridades);
                documentosRelevantes = new ArrayList();
                getJbLimpar().setEnabled(true);
            } catch (IOException ex) {
                Logger.getLogger(TelaBuscaEspacoVetorial.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jbconsultarActionPerformed

    private void jbLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLimparActionPerformed
        limparTabela();
        limparTabelaDeRelevantes();
        getJttextoconsulta().setText("");
        getJbLimpar().setEnabled(false);
        getJbconsultar().setEnabled(true);
    }//GEN-LAST:event_jbLimparActionPerformed

    private void jbsairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbsairActionPerformed
        int op = JOptionPane.showConfirmDialog(this, "Deseja mesmo sair?", "Sair da Pesquisa Vetorial", JOptionPane.OK_CANCEL_OPTION);

        if (op == 0) {
            dispose();
        }
    }//GEN-LAST:event_jbsairActionPerformed

    private void jbAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAdicionarActionPerformed
        if(getJcbDocumento().getSelectedItem().equals("")){
            JOptionPane.showMessageDialog(this, "Campo vazio, favor preencher um documento válido.", "Mensagem de Erro", JOptionPane.ERROR_MESSAGE);
        }
        else if(verificaElemento(getJcbDocumento().getSelectedItem().toString())){
            JOptionPane.showMessageDialog(this, "Documento já inserido, favor preencher um documento novo.", "Mensagem de Erro", JOptionPane.ERROR_MESSAGE);
        }
        else{
            documentosRelevantes.add(getJcbDocumento().getSelectedItem().toString());
            preencherTabelaRelevantes(getJcbDocumento().getSelectedItem().toString());
            
        }
    }//GEN-LAST:event_jbAdicionarActionPerformed
    
    public boolean verificaElemento(String documento){
        if(documentosRelevantes.isEmpty()){
            return false;
        }
        else{
            for(String rel: documentosRelevantes){
                if(rel.equals(documento)){
                    return true;
                }
            }
        }
        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel JPDoc;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTDocumentosRetornados;
    private javax.swing.JButton jbAdicionar;
    private javax.swing.JButton jbLimpar;
    private javax.swing.JButton jbconsultar;
    private javax.swing.JButton jbsair;
    private javax.swing.JComboBox<String> jcbDocumento;
    private javax.swing.JLabel jlAdicionar;
    private javax.swing.JLabel jlconsultadoc;
    private javax.swing.JLabel jldigitepc;
    private javax.swing.JTable jtDocRelSelecionado;
    private javax.swing.JTextField jttextoconsulta;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the JPDoc
     */
    public javax.swing.JPanel getJPDoc() {
        return JPDoc;
    }

    /**
     * @param JPDoc the JPDoc to set
     */
    public void setJPDoc(javax.swing.JPanel JPDoc) {
        this.JPDoc = JPDoc;
    }

    /**
     * @return the jScrollPane1
     */
    public javax.swing.JScrollPane getjScrollPane1() {
        return jScrollPane1;
    }

    /**
     * @param jScrollPane1 the jScrollPane1 to set
     */
    public void setjScrollPane1(javax.swing.JScrollPane jScrollPane1) {
        this.jScrollPane1 = jScrollPane1;
    }

    /**
     * @return the jScrollPane2
     */
    public javax.swing.JScrollPane getjScrollPane2() {
        return jScrollPane2;
    }

    /**
     * @param jScrollPane2 the jScrollPane2 to set
     */
    public void setjScrollPane2(javax.swing.JScrollPane jScrollPane2) {
        this.jScrollPane2 = jScrollPane2;
    }

    /**
     * @return the jTDocumentosRetornados
     */
    public javax.swing.JTable getjTDocumentosRetornados() {
        return jTDocumentosRetornados;
    }

    /**
     * @param jTDocumentosRetornados the jTDocumentosRetornados to set
     */
    public void setjTDocumentosRetornados(javax.swing.JTable jTDocumentosRetornados) {
        this.jTDocumentosRetornados = jTDocumentosRetornados;
    }

    /**
     * @return the jbAdicionar
     */
    public javax.swing.JButton getJbAdicionar() {
        return jbAdicionar;
    }

    /**
     * @param jbAdicionar the jbAdicionar to set
     */
    public void setJbAdicionar(javax.swing.JButton jbAdicionar) {
        this.jbAdicionar = jbAdicionar;
    }

    /**
     * @return the jbLimpar
     */
    public javax.swing.JButton getJbLimpar() {
        return jbLimpar;
    }

    /**
     * @param jbLimpar the jbLimpar to set
     */
    public void setJbLimpar(javax.swing.JButton jbLimpar) {
        this.jbLimpar = jbLimpar;
    }

    /**
     * @return the jbconsultar
     */
    public javax.swing.JButton getJbconsultar() {
        return jbconsultar;
    }

    /**
     * @param jbconsultar the jbconsultar to set
     */
    public void setJbconsultar(javax.swing.JButton jbconsultar) {
        this.jbconsultar = jbconsultar;
    }

    /**
     * @return the jbsair
     */
    public javax.swing.JButton getJbsair() {
        return jbsair;
    }

    /**
     * @param jbsair the jbsair to set
     */
    public void setJbsair(javax.swing.JButton jbsair) {
        this.jbsair = jbsair;
    }

  
    /**
     * @return the jlAdicionar
     */
    public javax.swing.JLabel getJlAdicionar() {
        return jlAdicionar;
    }

    /**
     * @param jlAdicionar the jlAdicionar to set
     */
    public void setJlAdicionar(javax.swing.JLabel jlAdicionar) {
        this.jlAdicionar = jlAdicionar;
    }

    /**
     * @return the jlconsultadoc
     */
    public javax.swing.JLabel getJlconsultadoc() {
        return jlconsultadoc;
    }

    /**
     * @param jlconsultadoc the jlconsultadoc to set
     */
    public void setJlconsultadoc(javax.swing.JLabel jlconsultadoc) {
        this.jlconsultadoc = jlconsultadoc;
    }

    /**
     * @return the jldigitepc
     */
    public javax.swing.JLabel getJldigitepc() {
        return jldigitepc;
    }

    /**
     * @param jldigitepc the jldigitepc to set
     */
    public void setJldigitepc(javax.swing.JLabel jldigitepc) {
        this.jldigitepc = jldigitepc;
    }

    /**
     * @return the jtDocRelSelecionado
     */
    public javax.swing.JTable getJtDocRelSelecionado() {
        return jtDocRelSelecionado;
    }

    /**
     * @param jtDocRelSelecionado the jtDocRelSelecionado to set
     */
    public void setJtDocRelSelecionado(javax.swing.JTable jtDocRelSelecionado) {
        this.jtDocRelSelecionado = jtDocRelSelecionado;
    }

    /**
     * @return the jttextoconsulta
     */
    public javax.swing.JTextField getJttextoconsulta() {
        return jttextoconsulta;
    }

    /**
     * @param jttextoconsulta the jttextoconsulta to set
     */
    public void setJttextoconsulta(javax.swing.JTextField jttextoconsulta) {
        this.jttextoconsulta = jttextoconsulta;
    }

    /**
     * @return the jButton1
     */
    public javax.swing.JButton getjButton1() {
        return jButton1;
    }

    /**
     * @param jButton1 the jButton1 to set
     */
    public void setjButton1(javax.swing.JButton jButton1) {
        this.jButton1 = jButton1;
    }

    /**
     * @return the jcbDocumento
     */
    public javax.swing.JComboBox<String> getJcbDocumento() {
        return jcbDocumento;
    }

    /**
     * @param jcbDocumento the jcbDocumento to set
     */
    public void setJcbDocumento(javax.swing.JComboBox<String> jcbDocumento) {
        this.jcbDocumento = jcbDocumento;
    }
}
